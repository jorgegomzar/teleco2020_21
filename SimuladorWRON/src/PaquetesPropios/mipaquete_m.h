//
// Generated file, do not edit! Created by nedtool 5.6 from src/PaquetesPropios/mipaquete.msg.
//

#ifndef __MIPAQUETE_M_H
#define __MIPAQUETE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/PaquetesPropios/mipaquete.msg:21</tt> by nedtool.
 * <pre>
 * message PeticionLightpath
 * {
 *     int nodo_origen;
 *     int nodo_destino;
 *     double tiempo_servicio;
 * }
 * </pre>
 */
class PeticionLightpath : public ::omnetpp::cMessage
{
  protected:
    int nodo_origen;
    int nodo_destino;
    double tiempo_servicio;

  private:
    void copy(const PeticionLightpath& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PeticionLightpath&);

  public:
    PeticionLightpath(const char *name=nullptr, short kind=0);
    PeticionLightpath(const PeticionLightpath& other);
    virtual ~PeticionLightpath();
    PeticionLightpath& operator=(const PeticionLightpath& other);
    virtual PeticionLightpath *dup() const override {return new PeticionLightpath(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNodo_origen() const;
    virtual void setNodo_origen(int nodo_origen);
    virtual int getNodo_destino() const;
    virtual void setNodo_destino(int nodo_destino);
    virtual double getTiempo_servicio() const;
    virtual void setTiempo_servicio(double tiempo_servicio);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PeticionLightpath& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PeticionLightpath& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PaquetesPropios/mipaquete.msg:29</tt> by nedtool.
 * <pre>
 * message RutaYLong
 * {
 *     int nodo_origen;
 *     int nodo_destino;
 *     double tiempo_servicio;
 *     int longitud_onda;
 *     int ruta[];
 *     int longitud_onda_proteccion;
 *     int ruta_proteccion[];
 *     bool proteccion_activada;
 * }
 * </pre>
 */
class RutaYLong : public ::omnetpp::cMessage
{
  protected:
    int nodo_origen;
    int nodo_destino;
    double tiempo_servicio;
    int longitud_onda;
    int *ruta; // array ptr
    unsigned int ruta_arraysize;
    int longitud_onda_proteccion;
    int *ruta_proteccion; // array ptr
    unsigned int ruta_proteccion_arraysize;
    bool proteccion_activada;

  private:
    void copy(const RutaYLong& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RutaYLong&);

  public:
    RutaYLong(const char *name=nullptr, short kind=0);
    RutaYLong(const RutaYLong& other);
    virtual ~RutaYLong();
    RutaYLong& operator=(const RutaYLong& other);
    virtual RutaYLong *dup() const override {return new RutaYLong(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNodo_origen() const;
    virtual void setNodo_origen(int nodo_origen);
    virtual int getNodo_destino() const;
    virtual void setNodo_destino(int nodo_destino);
    virtual double getTiempo_servicio() const;
    virtual void setTiempo_servicio(double tiempo_servicio);
    virtual int getLongitud_onda() const;
    virtual void setLongitud_onda(int longitud_onda);
    virtual void setRutaArraySize(unsigned int size);
    virtual unsigned int getRutaArraySize() const;
    virtual int getRuta(unsigned int k) const;
    virtual void setRuta(unsigned int k, int ruta);
    virtual int getLongitud_onda_proteccion() const;
    virtual void setLongitud_onda_proteccion(int longitud_onda_proteccion);
    virtual void setRuta_proteccionArraySize(unsigned int size);
    virtual unsigned int getRuta_proteccionArraySize() const;
    virtual int getRuta_proteccion(unsigned int k) const;
    virtual void setRuta_proteccion(unsigned int k, int ruta_proteccion);
    virtual bool getProteccion_activada() const;
    virtual void setProteccion_activada(bool proteccion_activada);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RutaYLong& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RutaYLong& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PaquetesPropios/mipaquete.msg:41</tt> by nedtool.
 * <pre>
 * message CargaNodo
 * {
 *     double carga[];
 *     int nodo;
 * }
 * </pre>
 */
class CargaNodo : public ::omnetpp::cMessage
{
  protected:
    double *carga; // array ptr
    unsigned int carga_arraysize;
    int nodo;

  private:
    void copy(const CargaNodo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CargaNodo&);

  public:
    CargaNodo(const char *name=nullptr, short kind=0);
    CargaNodo(const CargaNodo& other);
    virtual ~CargaNodo();
    CargaNodo& operator=(const CargaNodo& other);
    virtual CargaNodo *dup() const override {return new CargaNodo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setCargaArraySize(unsigned int size);
    virtual unsigned int getCargaArraySize() const;
    virtual double getCarga(unsigned int k) const;
    virtual void setCarga(unsigned int k, double carga);
    virtual int getNodo() const;
    virtual void setNodo(int nodo);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CargaNodo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CargaNodo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PaquetesPropios/mipaquete.msg:47</tt> by nedtool.
 * <pre>
 * message MatrizTrafico
 * {
 *     double trafico[];
 *     int cambiado;
 *     int calcular;
 * }
 * </pre>
 */
class MatrizTrafico : public ::omnetpp::cMessage
{
  protected:
    double *trafico; // array ptr
    unsigned int trafico_arraysize;
    int cambiado;
    int calcular;

  private:
    void copy(const MatrizTrafico& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MatrizTrafico&);

  public:
    MatrizTrafico(const char *name=nullptr, short kind=0);
    MatrizTrafico(const MatrizTrafico& other);
    virtual ~MatrizTrafico();
    MatrizTrafico& operator=(const MatrizTrafico& other);
    virtual MatrizTrafico *dup() const override {return new MatrizTrafico(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setTraficoArraySize(unsigned int size);
    virtual unsigned int getTraficoArraySize() const;
    virtual double getTrafico(unsigned int k) const;
    virtual void setTrafico(unsigned int k, double trafico);
    virtual int getCambiado() const;
    virtual void setCambiado(int cambiado);
    virtual int getCalcular() const;
    virtual void setCalcular(int calcular);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MatrizTrafico& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MatrizTrafico& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MIPAQUETE_M_H

