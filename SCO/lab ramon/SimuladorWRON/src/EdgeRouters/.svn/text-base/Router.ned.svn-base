//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package Routers;

import Fuentes.Colafuente;

//
// TODO auto-generated module
//
module Router
{
    parameters:
        double num_tx;
        double num_edge;
        double num_proc;
        double t_proc @unit(s);
        double x;
        double y;

        @display("bgb=400,682,#aecaee,#5aa206,2;bgp=10,10");
    gates:

        input in_fisica1[];
        input in_fisica2[];
        input in_fisica3[];
        input in_fisica4[];
        input in_fisica5[];
        input in_fisica6[];
        input in_fisica7[];
        input in_fisica8[];
        input in_logica[];
        input in_fuente;
        input in_control;
        output out_fisica1[];
        output out_fisica2[];
        output out_fisica3[];
        output out_fisica4[];
        output out_fisica5[];
        output out_fisica6[];
        output out_fisica7[];
        output out_fisica8[];
        output out_logica[];
        output out_fuente;
        output out_control;


    submodules:

        cola_in: Colaentrada {

            parameters:
                num_proc = num_proc;


                @display("i=block/subqueue;p=46,304");


            gates:
                in[num_tx];
                in_feedback[num_tx];
                out[num_proc];

        }



        procesador[num_proc]: Procesador {

            parameters:
                t_proc = t_proc;

                @display("i=block/process_s;p=198,120,c,40");



            gates:
                out[num_tx];

        }

        cola_out[num_tx]: Cola {

            parameters:
                num_proc = num_proc;

                @display("i=block/queue_s;p=375,41,c,40");


            gates:
                in[num_proc];

        }

        cola_fuente: Colafuente {

            parameters:
                @display("i=block/join_s;p=198,27");


            gates:
                in[num_proc];

        }

        control: Controlnodo {

            parameters:
                num_edge = num_edge;
                num_proc = num_proc;
                num_tx = num_tx;
                t_proc = t_proc;

                @display("i=block/control;p=46,435");

        }

    connections allowunconnected:
        in_control --> { @display("ls=green"); } --> control.in;

        in_fuente --> { @display("ls=blue;m=n"); } --> cola_in.in_fuente;

        cola_fuente.out --> { @display("ls=blue;m=n"); } --> out_fuente;



        for i=0..num_proc-1 {
            procesador[i].out_fuente --> { @display("ls=blue"); } --> cola_fuente.in[i];

        }


        for j=0..num_tx-1 {
            cola_out[j].out --> { @display("ls=white,2;m=e"); } --> out_logica[j];
            in_logica[j] --> { @display("ls=white,2"); } --> cola_in.in[j];
            cola_out[j].out_feedback --> { @display("ls=red"); } --> cola_in.in_feedback[j];
        }

        for j=0..num_tx-1, for i=0..num_proc-1 {
            procesador[i].out[j] --> cola_out[j].in[i];

        }

        for i=0..num_proc-1 {
            cola_in.out[i] --> procesador[i].in;

        }


}
